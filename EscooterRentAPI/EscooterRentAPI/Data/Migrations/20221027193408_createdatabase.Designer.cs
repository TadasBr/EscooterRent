// <auto-generated />
using EscooterRentAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EscooterRentAPI.Data.Migrations
{
    [DbContext(typeof(ElectricScooterDbContext))]
    [Migration("20221027193408_createdatabase")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EscooterRentAPI.Models.ElectricScooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxDistance")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("float");

                    b.Property<int>("RentPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentPointId");

                    b.ToTable("ElectricScooters");
                });

            modelBuilder.Entity("EscooterRentAPI.Models.RentPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentPoints");
                });

            modelBuilder.Entity("EscooterRentAPI.Models.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("EndHours")
                        .HasColumnType("int");

                    b.Property<int>("EndMinutes")
                        .HasColumnType("int");

                    b.Property<int>("RentPointId")
                        .HasColumnType("int");

                    b.Property<int>("StartHours")
                        .HasColumnType("int");

                    b.Property<int>("StartMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentPointId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("EscooterRentAPI.Models.ElectricScooter", b =>
                {
                    b.HasOne("EscooterRentAPI.Models.RentPoint", "RentPoint")
                        .WithMany("ElectricScooters")
                        .HasForeignKey("RentPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentPoint");
                });

            modelBuilder.Entity("EscooterRentAPI.Models.WorkTime", b =>
                {
                    b.HasOne("EscooterRentAPI.Models.RentPoint", "RentPoint")
                        .WithMany("WorkTime")
                        .HasForeignKey("RentPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentPoint");
                });

            modelBuilder.Entity("EscooterRentAPI.Models.RentPoint", b =>
                {
                    b.Navigation("ElectricScooters");

                    b.Navigation("WorkTime");
                });
#pragma warning restore 612, 618
        }
    }
}
